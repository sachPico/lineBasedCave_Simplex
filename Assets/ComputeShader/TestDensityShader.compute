#pragma kernel CSMain
#include "/Include/Inputs.compute"
#include "/Include/Noise.compute"

struct LineProperties
{
    int nodeA, nodeB;
    float3 xLocal, yLocal;
};

struct NodeProperties
{
    float3 position;
    float minRadius, maxRadius;
};

int totalVertexLayer, totalVertex;
float1 noiseIntensity;
float3 offset;
float1 noiseScale;

RWStructuredBuffer<NodeProperties> nodeProps;
RWStructuredBuffer<LineProperties> lineProps;

int GetIDFromCoord(int3 coord)
{
    return coord.x + (coord.z*numVertexX) + (coord.y*totalVertexLayer);
}

bool IsInRadius(NodeProperties n, float1 r, float3 sp)
{
    float1 dist = length(sp - n.position);
    if(dist <= r) return true;
    else return false;
}

bool IsOutRadius(NodeProperties n, float1 r, float3 sp)
{
    float1 dist = length(sp - n.position);
    if(dist >= r) return true;
    else return false;
}

float1 Falloff(float1 dist, float1 minR, float1 maxR)
{
    float1 fV = (maxR-dist)/(maxR-minR);
    if(fV<0) return -1;
    else return clamp(fV,0,1);
}

float1 EndToEndDensity(NodeProperties np, int spID)
{
    return Falloff(length(samplePoints[spID].xyz-np.position), np.minRadius, np.maxRadius);
}

int GetClosestLineID(float3 sp)
{
    LineProperties lp;
    NodeProperties nA, nB;
    float1 interpolateR, orthogonalProjection, lineLength, distToLine, closestDist;
    float3 nodeAToSample, nodeBToSample;
    int closestLineIndex=-1;

    closestDist = 1000;

    for(uint i=0; i<lineProps.Length; i++)
    {
        lp = lineProps[i];
        nA = nodeProps[lp.nodeA];
        nB = nodeProps[lp.nodeB];
        nodeAToSample = sp.xyz - nA.position;
        nodeBToSample = sp.xyz - nB.position;
        orthogonalProjection = dot(nodeAToSample,normalize(nB.position-nA.position));
        lineLength = length(nB.position-nA.position);
        distToLine = sqrt(pow(length(nodeAToSample),2)-pow(orthogonalProjection,2));
        interpolateR = nA.maxRadius + ((orthogonalProjection/lineLength)*(nB.maxRadius-nA.maxRadius));
        if(i==0)
        {
            //closestDist=distToLine;
            if(distToLine<=interpolateR&&orthogonalProjection>=-nA.maxRadius&&orthogonalProjection<=lineLength+nB.maxRadius)
            {
                closestDist=distToLine;
                closestLineIndex=i;
            }
            
        }
        if(distToLine<closestDist && distToLine<=interpolateR)
        {
            closestDist = distToLine;
            closestLineIndex = i;
        }
        
    }
    return closestLineIndex;
    
}

float1 SetDensity(int index)
{
    float1 lineLength, orthogonalProjectionToClosestLine, falloffValue, densityValue;
    float3 normalizedLine;
    
    int id = GetClosestLineID(samplePoints[index].xyz);
    if(id==-1)
    {
        return -1;
    }
    //return id;
    LineProperties closestLineProps = lineProps[id];
    NodeProperties closestNodeA = nodeProps[closestLineProps.nodeA];
    NodeProperties closestNodeB = nodeProps[closestLineProps.nodeB];

    lineLength = length(closestNodeB.position-closestNodeA.position);
    normalizedLine = normalize(closestNodeB.position - closestNodeA.position);
    orthogonalProjectionToClosestLine = dot(samplePoints[index].xyz-closestNodeA.position, normalizedLine);

    if(orthogonalProjectionToClosestLine<=0)
    {
        return EndToEndDensity(closestNodeA, index);
    }
    else if(orthogonalProjectionToClosestLine>=lineLength)
    {
        return EndToEndDensity(closestNodeB, index);
    }
    else//if(orthogonalProjectionToClosestLine>=-closestNodeA.maxRadius && orthogonalProjectionToClosestLine<=lineLength+closestNodeA.maxRadius)
    {
        float3 noiseInput;
        noiseInput.z = orthogonalProjectionToClosestLine / noiseScale;
        noiseInput.x = dot(samplePoints[index].xyz-closestNodeA.position, closestLineProps.xLocal) / noiseScale;
        noiseInput.y = dot(samplePoints[index].xyz-closestNodeA.position, closestLineProps.yLocal) / noiseScale;

        float3 orthoProject = closestNodeA.position+(orthogonalProjectionToClosestLine * normalizedLine);
        float1 dist = length(orthoProject - samplePoints[index].xyz);

        float1 interpolatedMaxRadius, interpolatedMinRadius;
        interpolatedMinRadius = closestNodeA.minRadius + ((orthogonalProjectionToClosestLine/lineLength) * (closestNodeB.minRadius - closestNodeA.minRadius));
        interpolatedMaxRadius = closestNodeA.maxRadius + ((orthogonalProjectionToClosestLine/lineLength) * (closestNodeB.maxRadius - closestNodeA.maxRadius));
        
        falloffValue = Falloff(dist, interpolatedMinRadius, interpolatedMaxRadius);//float1 falloffValue = ;
        //return falloffValue;
        if(falloffValue !=-1)
        {
            return falloffValue + (noise(noiseInput.x,noiseInput.y,noiseInput.z)*noiseIntensity);
        }
        else
        {
            return -1;
        }
    }
    
}

void SetPosition(int3 coord)
{
    int index = GetIDFromCoord(coord);
    samplePoints[index].x = offset.x + (coord.x * voxelSize);
    samplePoints[index].y = offset.y + (coord.y * voxelSize);
    samplePoints[index].z = offset.z + (coord.z * voxelSize);
}

[numthreads(1,1,1)]
void CSMain (int3 threadID : SV_DISPATCHTHREADID)
{

    totalVertexLayer = numVertexX*numVertexZ;  //Total Vertex dalam satu lapis
    //totalVertex= totalVertexLayer*numVertexY;

    int index = threadID.x + (threadID.z * numVertexX) + (threadID.y * totalVertexLayer);

    SetPosition(threadID);
    if(samplePoints[index].y<=0)
    {
        samplePoints[index].w = -1;
    }
    else
    {
        samplePoints[index].w = SetDensity(index);
    }
}
